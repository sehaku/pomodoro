{"version":3,"sources":["components/InCircleText.tsx","components/Progress.tsx","components/Timer.tsx","components/UploadButton.tsx","components/TimeSetter.tsx","components/VolumeSlider.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","in_circle","top","left","bottom","right","position","display","alignItems","justifyContent","InCircleText","props","classes","Box","className","Typography","component","color","Grid","container","justify","style","fontSize","isPlay","isPomodoro","minute","Math","floor","second","theme","createStyles","progressBottom","palette","grey","progressTop","Progress","Fragment","CircularProgress","size","variant","value","initialSec","Timer","useState","setIsPomodoro","isFirstPlay","setIsFirstPlay","setIsPlay","setSecond","pomodoroTime","setMinute","setInitialSec","musicStart","setMusicStart","useEffect","time","breakTime","pomodoroCount","longBreakInterval","longBreakTime","toggleBreakTime","usrMusic","volume","usrVolume","useInterval","pause","currentTime","onMusicChange","pomodoroMusic","breakTimeMusic","musicLenLimit","onPomodoroCountChange","play","prev","marginBottom","PlayCircleOutline","onClick","PauseCircleOutline","Restore","BreakTime","IconButton","accept","id","type","onChange","event","selectMusic","target","files","indexOf","alert","LibraryMusic","root","marginTop","TimeSetter","TextField","label","InputLabelProps","shrink","val","Number","setTime","NaN","VolumeSlider","isMute","setIsMute","gutterBottom","spacing","Button","setVolBeforeMute","setUsrVolume","VolumeUp","volBeforeMute","VolumeOff","item","xs","Slider","aria-labelledby","settingBtn","fadeBox","width","height","backgroundColor","opacity","zIndex","resetPomodoro","paddingTop","App","setPomodoroTime","setBreakTime","setLongBreakTime","setLongBreakInterval","fade","setFade","defaultMusicURL","Audio","setPomodoroMusic","setBreakTimeMusic","setUsrMusic","setPomodoroCount","Container","trigger","Settings","modal","onOpen","onClose","isNaN","close","padding","borderRadius","UploadButton","musicUrl","window","URL","createObjectURL","music","cnt","visibility","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d3b99c2.chunk.js","sourcesContent":["import {\n  Box,\n  Grid,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\ntype Props = {\n  isPlay: boolean;\n  isPomodoro: boolean;\n  minute: number;\n  second: number;\n};\n\nconst useStyles = makeStyles({\n  in_circle: {\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n});\nconst InCircleText: React.FC<Props> = (props) => {\n  const classes = useStyles();\n  return (\n    <Box className={classes.in_circle}>\n      <Typography component=\"div\" color=\"textSecondary\">\n        <Grid container justify=\"center\">\n          <Typography style={{ fontSize: \"5vmin\", color: \"#eeeeee\" }}>\n            {props.isPlay ? (props.isPomodoro ? \"作業中\" : \"休憩中\") : \"停止中\"}\n          </Typography>\n        </Grid>\n        <Grid container justify=\"center\">\n          <Typography style={{ fontSize: \"5vmin\", color: \"#eeeeee\" }}>\n            {props.minute}:\n            {Math.floor(props.second / 10) === 0\n              ? \"0\" + props.second\n              : props.second}\n          </Typography>\n        </Grid>\n      </Typography>\n    </Box>\n  );\n};\n\nexport default InCircleText;\n","import {\n  CircularProgress,\n  createStyles,\n  makeStyles,\n  Theme,\n} from \"@material-ui/core\";\nimport React from \"react\";\ntype Props = {\n  minute: number;\n  second: number;\n  initialSec: number;\n};\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    progressBottom: {\n      color: theme.palette.grey[200],\n    },\n    progressTop: {\n      color: \"#aaaaaa\",\n      position: \"absolute\",\n      left: 0,\n    },\n  })\n);\nconst Progress: React.FC<Props> = (props) => {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <CircularProgress\n        size=\"50vmin\"\n        variant=\"determinate\"\n        value={100}\n        className={classes.progressBottom}\n      />\n      <CircularProgress\n        size=\"50vmin\"\n        variant=\"determinate\"\n        value={\n          100 * (1 - (props.minute * 60 + props.second) / props.initialSec)\n        }\n        className={classes.progressTop}\n      />\n    </React.Fragment>\n  );\n};\nexport default Progress;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Restore,\n  PauseCircleOutline,\n  PlayCircleOutline,\n} from \"@material-ui/icons\";\nimport {\n  Box,\n  createStyles,\n  Grid,\n  makeStyles,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport useInterval from \"use-interval\";\nimport InCircleText from \"./InCircleText\";\nimport Progress from \"./Progress\";\ntype Props = {\n  pomodoroTime: number;\n  breakTime: number;\n  longBreakTime: number;\n  longBreakInterval: number;\n  pomodoroMusic: HTMLAudioElement;\n  breakTimeMusic: HTMLAudioElement;\n  usrMusic: HTMLAudioElement;\n  usrVolume: number;\n  onMusicChange: (music: HTMLAudioElement) => void;\n  pomodoroCount: number;\n  onPomodoroCountChange: (num: number) => void;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    progressBottom: {\n      color: theme.palette.grey[200],\n    },\n    progressTop: {\n      color: \"#aaaaaa\",\n      position: \"absolute\",\n      left: 0,\n    },\n  })\n);\nconst Timer: React.FC<Props> = (props) => {\n  const musicLenLimit = 10;\n  const [isPomodoro, setIsPomodoro] = useState<boolean>(true);\n  const [isFirstPlay, setIsFirstPlay] = useState<boolean>(true);\n  const [isPlay, setIsPlay] = useState<boolean>(false);\n  // const [second, setSecond] = useState<number>(10);\n  // const [minute, setMinute] = useState<number>(0);\n  const [second, setSecond] = useState<number>(0);\n  const [minute, setMinute] = useState<number>(props.pomodoroTime);\n  const [initialSec, setInitialSec] = useState<number>(minute * 60 + second);\n  const [musicStart, setMusicStart] = useState<boolean>(false);\n  useEffect(() => {\n    let time = isPomodoro ? props.pomodoroTime : props.breakTime;\n    if (!isPomodoro && props.pomodoroCount % props.longBreakInterval === 0) {\n      time = props.longBreakTime;\n    }\n    setSecond(0);\n    setMinute(time);\n    setInitialSec(time * 60);\n  }, [isPomodoro]);\n  useEffect(() => {\n    if (isFirstPlay) {\n      setMinute(props.pomodoroTime);\n      setInitialSec(props.pomodoroTime * 60);\n    }\n  }, [props.pomodoroTime]);\n  useEffect(() => {\n    toggleBreakTime();\n  }, [props.pomodoroCount]);\n  useEffect(() => {\n    props.usrMusic.volume = props.usrVolume / 100;\n  }, [props.usrMusic, props.usrVolume]);\n  // useEffect(() => {\n  //   if (!musicStart) {\n  //     props.onMusicChange(\n  //       isPomodoro ? props.pomodoroMusic : props.breakTimeMusic\n  //     );\n  //   }\n  // }, [props.pomodoroMusic, props.breakTimeMusic, isPomodoro, musicStart]);\n  useInterval(\n    () => {\n      props.usrMusic.pause();\n      props.usrMusic.currentTime = 0;\n      setMusicStart(!musicStart);\n      props.onMusicChange(\n        isPomodoro ? props.pomodoroMusic : props.breakTimeMusic\n      );\n    },\n    musicStart ? musicLenLimit * 1000 : null\n  );\n  const toggleBreakTime = () => {\n    if (\n      props.pomodoroCount !== 0 &&\n      props.pomodoroCount % props.longBreakInterval === 0\n    ) {\n      setMinute(props.longBreakTime);\n      setInitialSec(props.longBreakTime * 60);\n    } else if (!isFirstPlay) {\n      setMinute(props.breakTime);\n      setInitialSec(props.breakTime * 60);\n    }\n  };\n  useInterval(\n    () => {\n      if (second <= 0) {\n        if (minute === 0) {\n          if (isPomodoro) {\n            props.onPomodoroCountChange(props.pomodoroCount);\n          } else {\n            setMinute(props.pomodoroTime);\n            setInitialSec(props.pomodoroTime * 60);\n          }\n          setMusicStart(!musicStart);\n          // props.usrMusic.volume = props.usrVolume / 100;\n          props.usrMusic.play();\n          setIsPomodoro(!isPomodoro);\n          setSecond(0);\n        } else {\n          setMinute((prev) => prev - 1);\n          setSecond(59);\n        }\n      } else {\n        setSecond((prev) => prev - 1);\n      }\n    },\n    isPlay ? 1000 : null\n  );\n  const resetTimer = () => {\n    setIsPlay(false);\n    setIsFirstPlay(true);\n    setMinute(props.pomodoroTime);\n    setSecond(0);\n    setIsPomodoro(true);\n    setInitialSec(props.pomodoroTime * 60);\n  };\n\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        alignItems=\"center\"\n        justify=\"center\"\n        style={{ marginBottom: \"20px\" }}\n      >\n        <Box position=\"relative\" display=\"inline-flex\">\n          <Progress minute={minute} second={second} initialSec={initialSec} />\n          <InCircleText\n            isPlay={isPlay}\n            isPomodoro={isPomodoro}\n            minute={minute}\n            second={second}\n          />\n        </Box>\n      </Grid>\n      <Grid container alignItems=\"center\" justify=\"center\">\n        <PlayCircleOutline\n          onClick={() => {\n            setIsPlay(true);\n            if (isFirstPlay) {\n              setInitialSec(minute * 60 + second);\n            }\n            setIsFirstPlay(false);\n          }}\n          style={{\n            color: \"#eeeeee\",\n            fontSize: \"20vmin\",\n            display: isPlay ? \"none\" : \"\",\n          }}\n        />\n        <PauseCircleOutline\n          onClick={() => {\n            setIsPlay(false);\n          }}\n          style={{\n            color: \"#eeeeee\",\n            fontSize: \"20vmin\",\n            display: isPlay ? \"\" : \"none\",\n          }}\n        />\n        <Restore\n          onClick={resetTimer}\n          style={{\n            color: \"#eeeeee\",\n            fontSize: \"20vmin\",\n          }}\n        />\n      </Grid>\n      <Grid container alignItems=\"center\" justify=\"center\">\n        <Typography style={{ fontSize: \"3vmin\", color: \"#eeeeee\" }}>\n          Pomodoro Count : {props.pomodoroCount}\n        </Typography>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default Timer;\n","import { IconButton } from \"@material-ui/core\";\nimport { LibraryMusic } from \"@material-ui/icons\";\n\nimport React from \"react\";\ntype Props = {\n  onMusicChange: (selectMusic: File) => void;\n};\nconst BreakTime: React.FC<Props> = (props) => {\n  return (\n    <IconButton component=\"label\">\n      <input\n        accept=\"audio/*\"\n        id=\"pomodoro-music\"\n        type=\"file\"\n        style={{ display: \"none\" }}\n        onChange={(event) => {\n          const selectMusic =\n            event.target.files !== null ? event.target.files[0] : null;\n          if (selectMusic === null) return;\n          if (selectMusic.type.indexOf(\"audio\") === -1) {\n            alert(\"オーディオファイルを選んでください\");\n            return;\n          }\n          props.onMusicChange(selectMusic);\n        }}\n      />\n      <LibraryMusic></LibraryMusic>\n    </IconButton>\n  );\n};\n\nexport default BreakTime;\n","import { createStyles, makeStyles, TextField, Theme } from \"@material-ui/core\";\nimport React from \"react\";\ntype Props = {\n  time: number;\n  setTime: (num: number) => void;\n  label: string;\n};\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      \"& > *\": {\n        fontSize: \"20px\",\n        marginTop: \"10px\",\n        marginBottom: \"10px\",\n      },\n    },\n  })\n);\nconst TimeSetter: React.FC<Props> = (props) => {\n  const classes = useStyles();\n  return (\n    <TextField\n      id=\"outlined-number\"\n      label={props.label}\n      type=\"number\"\n      InputLabelProps={{\n        shrink: true,\n      }}\n      variant=\"outlined\"\n      value={props.time}\n      onChange={(event) => {\n        const val = event.target.value;\n        if (val) {\n          if (Number(val) <= 1) {\n            props.setTime(1);\n          } else {\n            props.setTime(Math.floor(Number(val)));\n          }\n        } else {\n          props.setTime(Number(NaN));\n        }\n      }}\n      className={classes.root}\n    />\n  );\n};\nexport default TimeSetter;\n","import React, { useEffect } from \"react\";\nimport { Button, Grid, Slider, Typography } from \"@material-ui/core\";\nimport { VolumeOff, VolumeUp } from \"@material-ui/icons\";\ntype Props = {\n  volume: number;\n  setUsrVolume: (volume: number) => void;\n  volBeforeMute: number;\n  setVolBeforeMute: (volume: number) => void;\n  isMute: boolean;\n  setIsMute: (isMute: boolean) => void;\n};\n\nconst VolumeSlider: React.FC<Props> = (props) => {\n  useEffect(() => {\n    if (\n      (props.volume === 0 && !props.isMute) ||\n      (props.volume !== 0 && props.isMute)\n    )\n      props.setIsMute(!props.isMute);\n  }, [props, props.isMute, props.volume]);\n\n  return (\n    <React.Fragment>\n      <Typography id=\"input-slider\" gutterBottom>\n        Volume\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Button\n          onClick={(event) => {\n            props.setVolBeforeMute(props.volume);\n            props.setUsrVolume(0);\n            props.setIsMute(!props.isMute);\n          }}\n          style={{ display: props.isMute ? \"none\" : \"\" }}\n        >\n          <VolumeUp />\n        </Button>\n        <Button\n          onClick={(event) => {\n            props.setUsrVolume(props.volBeforeMute);\n            props.setIsMute(!props.isMute);\n          }}\n          style={{ display: props.isMute ? \"\" : \"none\" }}\n        >\n          <VolumeOff />\n        </Button>\n        <Grid item xs>\n          <Slider\n            value={props.volume}\n            onChange={(event, value) => {\n              props.setUsrVolume(value as number);\n            }}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\nexport default VolumeSlider;\n","import React, { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Container,\n  createStyles,\n  Grid,\n  IconButton,\n  makeStyles,\n  Theme,\n} from \"@material-ui/core\";\nimport { Settings } from \"@material-ui/icons\";\nimport Popup from \"reactjs-popup\";\nimport Timer from \"./Timer\";\nimport UploadButton from \"./UploadButton\";\nimport TimeSetter from \"./TimeSetter\";\nimport VolumeSlider from \"./VolumeSlider\";\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    settingBtn: {\n      fontSize: \"10vmin\",\n    },\n    fadeBox: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      backgroundColor: \"#000\",\n      opacity: 0.5,\n      zIndex: 1,\n    },\n    resetPomodoro: {\n      paddingTop: \"10px\"\n    }\n  })\n);\nconst App: React.FC = () => {\n  // 時間設定\n  // const [pomodoroTime, setPomodoroTime] = useState<number>(0);\n  // const [breakTime, setBreakTime] = useState<number>(0);\n  const [pomodoroTime, setPomodoroTime] = useState<number>(25);\n  const [breakTime, setBreakTime] = useState<number>(5);\n  const [longBreakTime, setLongBreakTime] = useState<number>(25);\n  const [longBreakInterval, setLongBreakInterval] = useState<number>(4);\n  // 設定画面で画面を暗くする\n  const [fade, setFade] = useState<boolean>(false);\n  // 音楽ファイルの設定\n  const defaultMusicURL = \"./alarmBreak.mp3\";\n  const [pomodoroMusic, setPomodoroMusic] = useState(\n    new Audio(defaultMusicURL)\n  );\n  const [breakTimeMusic, setBreakTimeMusic] = useState(\n    new Audio(defaultMusicURL)\n  );\n  const [usrMusic, setUsrMusic] = useState(new Audio(defaultMusicURL));\n  const [usrVolume, setUsrVolume] = useState<number>(100);\n  const [volBeforeMute, setVolBeforeMute] = useState<number>(100);\n  const [isMute, setIsMute] = useState(false);\n  const [pomodoroCount, setPomodoroCount] = useState<number>(0);\n\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Container className=\"root\">\n        <Popup\n          trigger={\n            <IconButton\n              style={{\n                color: \"#eeeeee\",\n                position: \"relative\",\n                top: 0,\n                left: \"80%\",\n              }}\n            >\n              <Settings className={classes.settingBtn} />\n            </IconButton>\n          }\n          modal\n          onOpen={() => {\n            setFade(true);\n          }}\n          onClose={() => {\n            setFade(false);\n            if (isNaN(pomodoroTime)) {\n              setPomodoroTime(1);\n            }\n            if (isNaN(breakTime)) {\n              setBreakTime(1);\n            }\n            if (isNaN(longBreakTime)) {\n              setLongBreakTime(1);\n            }\n            if (isNaN(longBreakInterval)) {\n              setLongBreakInterval(1);\n            }\n          }}\n        >\n          {(close: () => void) => (\n            <Grid\n              style={{\n                backgroundColor: \"#eeeeee\",\n                padding: \"20px\",\n                borderRadius: \"10px\",\n              }}\n            >\n              <Grid container alignItems=\"center\" justify=\"center\">\n                <TimeSetter\n                  time={pomodoroTime}\n                  setTime={setPomodoroTime}\n                  label=\"作業時間(min)\"\n                />\n                <UploadButton\n                  onMusicChange={(selectMusic) => {\n                    const musicUrl = window.URL.createObjectURL(selectMusic);\n                    setPomodoroMusic(new Audio(musicUrl));\n                  }}\n                />\n              </Grid>\n              <Grid container alignItems=\"center\" justify=\"center\">\n                <TimeSetter\n                  time={breakTime}\n                  setTime={setBreakTime}\n                  label=\"休憩時間(min)\"\n                />\n\n                <UploadButton\n                  onMusicChange={(selectMusic) => {\n                    const musicUrl = window.URL.createObjectURL(selectMusic);\n                    setBreakTimeMusic(new Audio(musicUrl));\n                  }}\n                />\n              </Grid>\n              <Grid container alignItems=\"center\" justify=\"flex-start\">\n                <TimeSetter\n                  time={longBreakTime}\n                  setTime={setLongBreakTime}\n                  label=\"長めの休憩時間(min)\"\n                />\n              </Grid>\n              <Grid container alignItems=\"center\" justify=\"flex-start\">\n                <TimeSetter\n                  time={longBreakInterval}\n                  setTime={setLongBreakInterval}\n                  label=\"長めの休憩頻度\"\n                />\n              </Grid>\n              <VolumeSlider\n                volume={usrVolume}\n                setUsrVolume={setUsrVolume}\n                volBeforeMute={volBeforeMute}\n                setVolBeforeMute={setVolBeforeMute}\n                isMute={isMute}\n                setIsMute={setIsMute}\n              />\n              <Grid container alignItems=\"center\" justify=\"center\">\n                <Button\n                  variant=\"outlined\"\n                  onClick={() => {\n                    setFade(false);\n                    close();\n                    if (isNaN(pomodoroTime)) {\n                      setPomodoroTime(1);\n                    }\n                    if (isNaN(breakTime)) {\n                      setBreakTime(1);\n                    }\n                    if (isNaN(longBreakTime)) {\n                      setLongBreakTime(1);\n                    }\n                    if (isNaN(longBreakInterval)) {\n                      setLongBreakInterval(1);\n                    }\n                  }}\n                >\n                  OK\n                </Button>\n              </Grid>\n              <Grid\n                container\n                alignItems=\"center\"\n                justify=\"center\"\n                className={classes.resetPomodoro}\n              >\n                <Button\n                  variant=\"outlined\"\n                  onClick={() => {\n                    setFade(false);\n                    close();\n                    setPomodoroCount(0);\n                  }}\n                >\n                  Reset Pomodoro Count\n                </Button>\n              </Grid>\n            </Grid>\n          )}\n        </Popup>\n        <Timer\n          pomodoroTime={pomodoroTime}\n          breakTime={breakTime}\n          longBreakTime={longBreakTime}\n          longBreakInterval={longBreakInterval}\n          usrMusic={usrMusic}\n          pomodoroMusic={pomodoroMusic}\n          breakTimeMusic={breakTimeMusic}\n          usrVolume={usrVolume}\n          onMusicChange={(music) => {\n            setUsrMusic(music);\n          }}\n          pomodoroCount={pomodoroCount}\n          onPomodoroCountChange={(cnt) => {\n            setPomodoroCount(cnt + 1);\n          }}\n        />\n      </Container>\n      <Box\n        className={classes.fadeBox}\n        style={{ visibility: fade ? \"visible\" : \"hidden\" }}\n      ></Box>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
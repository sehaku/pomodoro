{"version":3,"sources":["db/index.ts","components/InCircleText.tsx","components/Progress.tsx","components/Timer.tsx","components/UploadButton.tsx","components/TimeSetter.tsx","components/VolumeSlider.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["db","settings","version","stores","Dexie","useStyles","makeStyles","in_circle","top","left","bottom","right","position","display","alignItems","justifyContent","InCircleText","props","classes","Box","className","Typography","component","color","Grid","container","justify","style","fontSize","isPlay","isPomodoro","minute","Math","floor","second","theme","createStyles","progressBottom","palette","grey","progressTop","Progress","Fragment","CircularProgress","size","variant","value","initialSec","Timer","useState","setIsPomodoro","isFirstPlay","setIsFirstPlay","setIsPlay","setSecond","pomodoroTime","setMinute","setInitialSec","musicStart","setMusicStart","useEffect","toggleBreakTime","pomodoroCount","usrMusic","volume","usrVolume","useInterval","pause","currentTime","onMusicChange","pomodoroMusic","breakTimeMusic","musicLenLimit","longBreakInterval","longBreakTime","breakTime","onPomodoroCountChange","play","prev","marginBottom","PlayCircleOutline","onClick","PauseCircleOutline","Restore","BreakTime","IconButton","accept","id","type","onChange","event","selectMusic","target","files","indexOf","alert","LibraryMusic","root","marginTop","TimeSetter","TextField","label","InputLabelProps","shrink","time","val","Number","setTime","NaN","VolumeSlider","isMute","setIsMute","gutterBottom","spacing","Button","setVolBeforeMute","setUsrVolume","VolumeUp","volBeforeMute","VolumeOff","item","xs","Slider","aria-labelledby","settingBtn","fadeBox","width","height","backgroundColor","opacity","zIndex","resetPomodoro","paddingTop","App","setPomodoroTime","setBreakTime","setLongBreakTime","setLongBreakInterval","fade","setFade","defaultMusicURL","Audio","setPomodoroMusic","setBreakTimeMusic","setUsrMusic","setPomodoroCount","console","log","settingCount","useLiveQuery","count","transaction","a","get","set","pomodoroSrc","breakTimeSrc","Container","add","src","update","then","catch","error","trigger","Settings","modal","onOpen","onClose","isNaN","close","padding","borderRadius","UploadButton","musicUrl","window","URL","createObjectURL","music","cnt","visibility","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b14924d9.chunk.js","sourcesContent":["import Dexie, { Table } from \"dexie\";\nimport { Settings } from \"./Settings\";\nclass SettingsDB extends Dexie {\n  settings!: Table<Settings>;\n  constructor() {\n    super(\"settingsDB\")\n    this.version(1).stores({\n      settings: '++id'\n    })\n  }\n}\nexport const db = new SettingsDB();\n","import {\n  Box,\n  Grid,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\ntype Props = {\n  isPlay: boolean;\n  isPomodoro: boolean;\n  minute: number;\n  second: number;\n};\n\nconst useStyles = makeStyles({\n  in_circle: {\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n});\nconst InCircleText: React.FC<Props> = (props) => {\n  const classes = useStyles();\n  return (\n    <Box className={classes.in_circle}>\n      <Typography component=\"div\" color=\"textSecondary\">\n        <Grid container justify=\"center\">\n          <Typography style={{ fontSize: \"5vmin\", color: \"#eeeeee\" }}>\n            {props.isPlay ? (props.isPomodoro ? \"作業中\" : \"休憩中\") : \"停止中\"}\n          </Typography>\n        </Grid>\n        <Grid container justify=\"center\">\n          <Typography style={{ fontSize: \"5vmin\", color: \"#eeeeee\" }}>\n            {props.minute}:\n            {Math.floor(props.second / 10) === 0\n              ? \"0\" + props.second\n              : props.second}\n          </Typography>\n        </Grid>\n      </Typography>\n    </Box>\n  );\n};\n\nexport default InCircleText;\n","import {\n  CircularProgress,\n  createStyles,\n  makeStyles,\n  Theme,\n} from \"@material-ui/core\";\nimport React from \"react\";\ntype Props = {\n  minute: number;\n  second: number;\n  initialSec: number;\n};\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    progressBottom: {\n      color: theme.palette.grey[200],\n    },\n    progressTop: {\n      color: \"#aaaaaa\",\n      position: \"absolute\",\n      left: 0,\n    },\n  })\n);\nconst Progress: React.FC<Props> = (props) => {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <CircularProgress\n        size=\"50vmin\"\n        variant=\"determinate\"\n        value={100}\n        className={classes.progressBottom}\n      />\n      <CircularProgress\n        size=\"50vmin\"\n        variant=\"determinate\"\n        value={\n          100 * (1 - (props.minute * 60 + props.second) / props.initialSec)\n        }\n        className={classes.progressTop}\n      />\n    </React.Fragment>\n  );\n};\nexport default Progress;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Restore,\n  PauseCircleOutline,\n  PlayCircleOutline,\n} from \"@material-ui/icons\";\nimport {\n  Box,\n  createStyles,\n  Grid,\n  makeStyles,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport useInterval from \"use-interval\";\nimport InCircleText from \"./InCircleText\";\nimport Progress from \"./Progress\";\ntype Props = {\n  pomodoroTime: number;\n  breakTime: number;\n  longBreakTime: number;\n  longBreakInterval: number;\n  pomodoroMusic: HTMLAudioElement;\n  breakTimeMusic: HTMLAudioElement;\n  usrMusic: HTMLAudioElement;\n  usrVolume: number;\n  onMusicChange: (music: HTMLAudioElement) => void;\n  pomodoroCount: number;\n  onPomodoroCountChange: (num: number) => void;\n};\n\nconst Timer: React.FC<Props> = (props) => {\n  const musicLenLimit = 10;\n  const [isPomodoro, setIsPomodoro] = useState<boolean>(true);\n  const [isFirstPlay, setIsFirstPlay] = useState<boolean>(true);\n  const [isPlay, setIsPlay] = useState<boolean>(false);\n  // const [second, setSecond] = useState<number>(10);\n  // const [minute, setMinute] = useState<number>(0);\n  const [second, setSecond] = useState<number>(0);\n  const [minute, setMinute] = useState<number>(props.pomodoroTime);\n  const [initialSec, setInitialSec] = useState<number>(minute * 60 + second);\n  const [musicStart, setMusicStart] = useState<boolean>(false);\n  useEffect(() => {\n    if (isFirstPlay) {\n      setMinute(props.pomodoroTime);\n      setInitialSec(props.pomodoroTime * 60);\n    }\n  }, [props.pomodoroTime]);\n  useEffect(() => {\n    toggleBreakTime();\n  }, [props.pomodoroCount]);\n  useEffect(() => {\n    props.usrMusic.volume = props.usrVolume / 100;\n  }, [props.usrMusic, props.usrVolume]);\n\n  useInterval(\n    () => {\n      props.usrMusic.pause();\n      props.usrMusic.currentTime = 0;\n      setMusicStart(!musicStart);\n      props.onMusicChange(\n        isPomodoro ? props.pomodoroMusic : props.breakTimeMusic\n      );\n    },\n    musicStart ? musicLenLimit * 1000 : null\n  );\n  const toggleBreakTime = () => {\n    if (\n      props.pomodoroCount !== 0 &&\n      props.pomodoroCount % props.longBreakInterval === 0\n    ) {\n      setMinute(props.longBreakTime);\n      setInitialSec(props.longBreakTime * 60);\n    } else if (!isFirstPlay) {\n      setMinute(props.breakTime);\n      setInitialSec(props.breakTime * 60);\n    }\n  };\n  useInterval(\n    () => {\n      if (second <= 0) {\n        if (minute === 0) {\n          if (isPomodoro) {\n            props.onPomodoroCountChange(props.pomodoroCount);\n          } else {\n            setMinute(props.pomodoroTime);\n            setInitialSec(props.pomodoroTime * 60);\n          }\n          setMusicStart(!musicStart);\n          props.usrMusic.play();\n          setIsPomodoro(!isPomodoro);\n          setSecond(0);\n        } else {\n          setMinute((prev) => prev - 1);\n          setSecond(59);\n        }\n      } else {\n        setSecond((prev) => prev - 1);\n      }\n    },\n    isPlay ? 1000 : null\n  );\n  const resetTimer = () => {\n    setIsPlay(false);\n    setIsFirstPlay(true);\n    setMinute(props.pomodoroTime);\n    setSecond(0);\n    setIsPomodoro(true);\n    setInitialSec(props.pomodoroTime * 60);\n  };\n\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        alignItems=\"center\"\n        justify=\"center\"\n        style={{ marginBottom: \"20px\" }}\n      >\n        <Box position=\"relative\" display=\"inline-flex\">\n          <Progress minute={minute} second={second} initialSec={initialSec} />\n          <InCircleText\n            isPlay={isPlay}\n            isPomodoro={isPomodoro}\n            minute={minute}\n            second={second}\n          />\n        </Box>\n      </Grid>\n      <Grid container alignItems=\"center\" justify=\"center\">\n        <PlayCircleOutline\n          onClick={() => {\n            setIsPlay(true);\n            setIsFirstPlay(false);\n          }}\n          style={{\n            color: \"#eeeeee\",\n            fontSize: \"20vmin\",\n            display: isPlay ? \"none\" : \"\",\n          }}\n        />\n        <PauseCircleOutline\n          onClick={() => {\n            setIsPlay(false);\n          }}\n          style={{\n            color: \"#eeeeee\",\n            fontSize: \"20vmin\",\n            display: isPlay ? \"\" : \"none\",\n          }}\n        />\n        <Restore\n          onClick={resetTimer}\n          style={{\n            color: \"#eeeeee\",\n            fontSize: \"20vmin\",\n          }}\n        />\n      </Grid>\n      <Grid container alignItems=\"center\" justify=\"center\">\n        <Typography style={{ fontSize: \"3vmin\", color: \"#eeeeee\" }}>\n          Pomodoro Count : {props.pomodoroCount}\n        </Typography>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default Timer;\n","import { IconButton } from \"@material-ui/core\";\nimport { LibraryMusic } from \"@material-ui/icons\";\n\nimport React from \"react\";\ntype Props = {\n  onMusicChange: (selectMusic: File) => void;\n};\nconst BreakTime: React.FC<Props> = (props) => {\n  return (\n    <IconButton component=\"label\">\n      <input\n        accept=\"audio/*\"\n        id=\"pomodoro-music\"\n        type=\"file\"\n        style={{ display: \"none\" }}\n        onChange={(event) => {\n          const selectMusic =\n            event.target.files !== null ? event.target.files[0] : null;\n          if (selectMusic === null) return;\n          if (selectMusic.type.indexOf(\"audio\") === -1) {\n            alert(\"オーディオファイルを選んでください\");\n            return;\n          }\n          props.onMusicChange(selectMusic);\n        }}\n      />\n      <LibraryMusic></LibraryMusic>\n    </IconButton>\n  );\n};\n\nexport default BreakTime;\n","import { createStyles, makeStyles, TextField, Theme } from \"@material-ui/core\";\nimport React from \"react\";\ntype Props = {\n  time: number;\n  setTime: (num: number) => void;\n  label: string;\n};\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      \"& > *\": {\n        fontSize: \"20px\",\n        marginTop: \"10px\",\n        marginBottom: \"10px\",\n      },\n    },\n  })\n);\nconst TimeSetter: React.FC<Props> = (props) => {\n  const classes = useStyles();\n  return (\n    <TextField\n      id=\"outlined-number\"\n      label={props.label}\n      type=\"number\"\n      InputLabelProps={{\n        shrink: true,\n      }}\n      variant=\"outlined\"\n      value={props.time}\n      onChange={(event) => {\n        const val = event.target.value;\n        if (val) {\n          if (Number(val) <= 1) {\n            props.setTime(1);\n          } else {\n            props.setTime(Math.floor(Number(val)));\n          }\n        } else {\n          props.setTime(Number(NaN));\n        }\n      }}\n      className={classes.root}\n    />\n  );\n};\nexport default TimeSetter;\n","import React, { useEffect } from \"react\";\nimport { Button, Grid, Slider, Typography } from \"@material-ui/core\";\nimport { VolumeOff, VolumeUp } from \"@material-ui/icons\";\ntype Props = {\n  volume: number;\n  setUsrVolume: (volume: number) => void;\n  volBeforeMute: number;\n  setVolBeforeMute: (volume: number) => void;\n  isMute: boolean;\n  setIsMute: (isMute: boolean) => void;\n};\n\nconst VolumeSlider: React.FC<Props> = (props) => {\n  useEffect(() => {\n    if (\n      (props.volume === 0 && !props.isMute) ||\n      (props.volume !== 0 && props.isMute)\n    )\n      props.setIsMute(!props.isMute);\n  }, [props, props.isMute, props.volume]);\n\n  return (\n    <React.Fragment>\n      <Typography id=\"input-slider\" gutterBottom>\n        Volume\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Button\n          onClick={(event) => {\n            props.setVolBeforeMute(props.volume);\n            props.setUsrVolume(0);\n            props.setIsMute(!props.isMute);\n          }}\n          style={{ display: props.isMute ? \"none\" : \"\" }}\n        >\n          <VolumeUp />\n        </Button>\n        <Button\n          onClick={(event) => {\n            props.setUsrVolume(props.volBeforeMute);\n            props.setIsMute(!props.isMute);\n          }}\n          style={{ display: props.isMute ? \"\" : \"none\" }}\n        >\n          <VolumeOff />\n        </Button>\n        <Grid item xs>\n          <Slider\n            value={props.volume}\n            onChange={(event, value) => {\n              props.setUsrVolume(value as number);\n            }}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\nexport default VolumeSlider;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Button,\n  Container,\n  createStyles,\n  Grid,\n  IconButton,\n  makeStyles,\n  Theme,\n} from \"@material-ui/core\";\nimport { DoubleArrowTwoTone, Settings } from \"@material-ui/icons\";\nimport Popup from \"reactjs-popup\";\nimport { db } from \"../db\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport Timer from \"./Timer\";\nimport UploadButton from \"./UploadButton\";\nimport TimeSetter from \"./TimeSetter\";\nimport VolumeSlider from \"./VolumeSlider\";\nimport { convertCompilerOptionsFromJson } from \"typescript\";\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    settingBtn: {\n      fontSize: \"10vmin\",\n    },\n    fadeBox: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      backgroundColor: \"#000\",\n      opacity: 0.5,\n      zIndex: 1,\n    },\n    resetPomodoro: {\n      paddingTop: \"10px\",\n    },\n  })\n);\nconst App: React.FC = () => {\n  // 時間設定\n  // const [pomodoroTime, setPomodoroTime] = useState<number>(0);\n  // const [breakTime, setBreakTime] = useState<number>(0);\n  const [pomodoroTime, setPomodoroTime] = useState<number>(25);\n  const [breakTime, setBreakTime] = useState<number>(5);\n  const [longBreakTime, setLongBreakTime] = useState<number>(25);\n  const [longBreakInterval, setLongBreakInterval] = useState<number>(4);\n  // 設定画面で画面を暗くする\n  const [fade, setFade] = useState<boolean>(false);\n  // 音楽ファイルの設定\n  const defaultMusicURL = \"./alarmBreak.mp3\";\n  const [pomodoroMusic, setPomodoroMusic] = useState(\n    new Audio(defaultMusicURL)\n  );\n  const [breakTimeMusic, setBreakTimeMusic] = useState(\n    new Audio(defaultMusicURL)\n  );\n  const [usrMusic, setUsrMusic] = useState(new Audio(defaultMusicURL));\n  const [usrVolume, setUsrVolume] = useState<number>(100);\n  const [volBeforeMute, setVolBeforeMute] = useState<number>(100);\n  const [isMute, setIsMute] = useState(false);\n  const [pomodoroCount, setPomodoroCount] = useState<number>(0);\n  const classes = useStyles();\n  console.log(pomodoroMusic)\n  console.log(\"Yay\")\n  // const settings = useLiveQuery(() => db.settings.toArray(), []);\n  // console.log(settings);\n  const settingCount = useLiveQuery(()=>db.settings.count());\n  // console.log(settingCount);\n  // console.log(db.settings.where(\"id\").equals(1).toArray());\n  const handleClick = () => {\n    console.log(\"click\");\n    db.transaction(\"rw\", db.settings, ()=>{\n    if (settingCount === 0) {\n      db.settings.add(\n        {\n          id: 1,\n          usrVolume: usrVolume,\n          pomodoroCount: pomodoroCount,\n          pomodoroTime: pomodoroTime,\n          breakTime: breakTime,\n          longBreakTime: longBreakTime,\n          longBreakInterval: longBreakInterval,\n          pomodoroSrc: pomodoroMusic.src,\n          breakTimeSrc: breakTimeMusic.src,\n        })\n    } else {\n      db.settings.update(1,{\n        id: 1,\n        usrVolume: usrVolume,\n        pomodoroCount: pomodoroCount,\n        pomodoroTime: pomodoroTime,\n        breakTime: breakTime,\n        longBreakTime: longBreakTime,\n        longBreakInterval: longBreakInterval,\n        pomodoroSrc: pomodoroMusic.src,\n        breakTimeSrc: breakTimeMusic.src,\n      })\n      // console.log(\"Success to update settings.\")\n    }\n    }).then(() => {\n      console.log(\"Success to udpate settings.\");\n    }).catch((error) => {\n      alert(\"Failed to update settings.\");\n    })\n  };\n  useEffect(() => {\n    // console.log(\"effect\");\n    if (settingCount === 0) {\n      // pass\n    } else {\n      db.transaction('r', db.settings, async () => {\n        const set = await db.settings.get({ id: 1 });\n        setUsrVolume(() => {\n          return set?.usrVolume || usrVolume\n        });\n        setPomodoroCount(() => {\n          return set?.pomodoroCount || pomodoroCount\n        });\n        setPomodoroTime(() => {\n          return set?.pomodoroTime || pomodoroTime\n        });\n        setBreakTime(() => {\n          return set?.breakTime || breakTime\n        });\n        setLongBreakTime(() => {\n          return set?.longBreakTime || longBreakTime\n        });\n        setLongBreakInterval(() => {\n          return set?.longBreakInterval || longBreakInterval\n        });\n        setPomodoroMusic(() => {\n          return new Audio(set?.pomodoroSrc) || pomodoroMusic\n        });\n        setBreakTimeMusic(() => {\n          return new Audio(set?.breakTimeSrc) || breakTimeMusic\n        });\n        // console.log(\"effectDone\")\n      })\n    }\n  },[]); // componentDidMount\n  return (\n    <React.Fragment>\n      <Container className=\"root\">\n        <button onClick={\n          handleClick\n        }\n        >Click</button>\n        <Popup\n          trigger={\n            <IconButton\n              style={{\n                color: \"#eeeeee\",\n                position: \"relative\",\n                top: 0,\n                left: \"80%\",\n              }}\n            >\n              <Settings className={classes.settingBtn} />\n            </IconButton>\n          }\n          modal\n          onOpen={() => {\n            setFade(true);\n          }}\n          onClose={() => {\n            if (isNaN(pomodoroTime)) {\n              setPomodoroTime(1);\n            }\n            if (isNaN(breakTime)) {\n              setBreakTime(1);\n            }\n            if (isNaN(longBreakTime)) {\n              setLongBreakTime(1);\n            }\n            if (isNaN(longBreakInterval)) {\n              setLongBreakInterval(1);\n            }\n            setFade(false);\n          }}\n        >\n          {(close: () => void) => (\n            <Grid\n              style={{\n                backgroundColor: \"#eeeeee\",\n                padding: \"20px\",\n                borderRadius: \"10px\",\n              }}\n            >\n              <Grid container alignItems=\"center\" justify=\"center\">\n                <TimeSetter\n                  time={pomodoroTime}\n                  setTime={setPomodoroTime}\n                  label=\"作業時間(min)\"\n                />\n                <UploadButton\n                  onMusicChange={(selectMusic) => {\n                    const musicUrl = window.URL.createObjectURL(selectMusic);\n                    setPomodoroMusic(new Audio(musicUrl));\n                  }}\n                />\n              </Grid>\n              <Grid container alignItems=\"center\" justify=\"center\">\n                <TimeSetter\n                  time={breakTime}\n                  setTime={setBreakTime}\n                  label=\"休憩時間(min)\"\n                />\n\n                <UploadButton\n                  onMusicChange={(selectMusic) => {\n                    const musicUrl = window.URL.createObjectURL(selectMusic);\n                    setBreakTimeMusic(new Audio(musicUrl));\n                  }}\n                />\n              </Grid>\n              <Grid container alignItems=\"center\" justify=\"flex-start\">\n                <TimeSetter\n                  time={longBreakTime}\n                  setTime={setLongBreakTime}\n                  label=\"長めの休憩時間(min)\"\n                />\n              </Grid>\n              <Grid container alignItems=\"center\" justify=\"flex-start\">\n                <TimeSetter\n                  time={longBreakInterval}\n                  setTime={setLongBreakInterval}\n                  label=\"長めの休憩頻度\"\n                />\n              </Grid>\n              <VolumeSlider\n                volume={usrVolume}\n                setUsrVolume={setUsrVolume}\n                volBeforeMute={volBeforeMute}\n                setVolBeforeMute={setVolBeforeMute}\n                isMute={isMute}\n                setIsMute={setIsMute}\n              />\n              <Grid container alignItems=\"center\" justify=\"center\">\n                <Button\n                  variant=\"outlined\"\n                  onClick={() => {\n                    setFade(false);\n                    close();\n                    if (isNaN(pomodoroTime)) {\n                      setPomodoroTime(1);\n                    }\n                    if (isNaN(breakTime)) {\n                      setBreakTime(1);\n                    }\n                    if (isNaN(longBreakTime)) {\n                      setLongBreakTime(1);\n                    }\n                    if (isNaN(longBreakInterval)) {\n                      setLongBreakInterval(1);\n                    }\n                  }}\n                >\n                  OK\n                </Button>\n              </Grid>\n              <Grid\n                container\n                alignItems=\"center\"\n                justify=\"center\"\n                className={classes.resetPomodoro}\n              >\n                <Button\n                  variant=\"outlined\"\n                  onClick={() => {\n                    setFade(false);\n                    close();\n                    setPomodoroCount(0);\n                  }}\n                >\n                  Reset Pomodoro Count\n                </Button>\n              </Grid>\n            </Grid>\n          )}\n        </Popup>\n        <Timer\n          pomodoroTime={pomodoroTime}\n          breakTime={breakTime}\n          longBreakTime={longBreakTime}\n          longBreakInterval={longBreakInterval}\n          usrMusic={usrMusic}\n          pomodoroMusic={pomodoroMusic}\n          breakTimeMusic={breakTimeMusic}\n          usrVolume={usrVolume}\n          onMusicChange={(music) => {\n            setUsrMusic(music);\n          }}\n          pomodoroCount={pomodoroCount}\n          onPomodoroCountChange={(cnt) => {\n            setPomodoroCount(cnt + 1);\n          }}\n        />\n      </Container>\n      <Box\n        className={classes.fadeBox}\n        style={{ visibility: fade ? \"visible\" : \"hidden\" }}\n      ></Box>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Timer.tsx","components/UploadButton.tsx","components/TimeSetter.tsx","components/VolumeSlider.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","progressBottom","color","palette","grey","progressTop","position","left","in_circle","top","bottom","right","display","alignItems","justifyContent","Timer","props","useState","isPomodoro","setIsPomodoro","isFirstPlay","setIsFirstPlay","isPlay","setIsPlay","second","setSecond","minute","setMinute","initialSec","setInitialSec","pomodoroCount","setPomodoroCount","musicStart","setMusicStart","useEffect","time","pomodoroTime","breakTime","longBreakInterval","longBreakTime","toggleBreakTime","usrMusic","volume","usrVolume","onMusicChange","pomodoroMusic","breakTimeMusic","useInterval","pause","currentTime","musicLenLimit","prev","play","classes","Fragment","Grid","container","justify","style","marginBottom","Box","CircularProgress","size","variant","value","className","Typography","component","fontSize","Math","floor","PlayCircleOutline","onClick","PauseCircleOutline","Restore","BreakTime","IconButton","accept","id","type","onChange","event","selectMusic","target","files","indexOf","alert","LibraryMusic","root","marginTop","TimeSetter","TextField","label","InputLabelProps","shrink","val","Number","setTime","NaN","VolumeSlider","isMute","setIsMute","gutterBottom","spacing","Button","setVolBeforeMute","setUsrVolume","VolumeUp","volBeforeMute","VolumeOff","item","xs","Slider","aria-labelledby","settingBtn","fadeBox","width","height","backgroundColor","opacity","zIndex","App","setPomodoroTime","setBreakTime","setLongBreakTime","setLongBreakInterval","fade","setFade","defaultMusicURL","Audio","setPomodoroMusic","setBreakTimeMusic","setUsrMusic","Container","trigger","Settings","modal","onOpen","onClose","isNaN","close","padding","borderRadius","UploadButton","musicUrl","window","URL","createObjectURL","music","visibility","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+TA6BMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,eAAgB,CACdC,MAAOH,EAAMI,QAAQC,KAAK,MAE5BC,YAAa,CACXH,MAAO,UACPI,SAAU,WACVC,KAAM,GAERC,UAAW,CACTC,IAAK,EACLF,KAAM,EACNG,OAAQ,EACRC,MAAO,EACPL,SAAU,WACVM,QAAS,OACTC,WAAY,SACZC,eAAgB,eA8KPC,EA1KgB,SAACC,GAC9B,IADwC,EAEJC,oBAAkB,GAFd,mBAEjCC,EAFiC,KAErBC,EAFqB,OAGFF,oBAAkB,GAHhB,mBAGjCG,EAHiC,KAGpBC,EAHoB,OAIZJ,oBAAkB,GAJN,mBAIjCK,EAJiC,KAIzBC,EAJyB,OAKZN,mBAAiB,IALL,mBAKjCO,EALiC,KAKzBC,EALyB,OAMZR,mBAAiB,GANL,mBAMjCS,EANiC,KAMzBC,EANyB,OASJV,mBAA0B,GAATS,EAAcF,GAT3B,mBASjCI,EATiC,KASrBC,EATqB,OAUEZ,mBAAiB,GAVnB,mBAUjCa,EAViC,KAUlBC,EAVkB,OAWJd,oBAAkB,GAXd,mBAWjCe,EAXiC,KAWrBC,EAXqB,KAYxCC,qBAAU,WACR,IAAIC,EAAOjB,EAAaF,EAAMoB,aAAepB,EAAMqB,UAC9CnB,GAAcY,EAAgBd,EAAMsB,oBAAsB,IAC7DH,EAAOnB,EAAMuB,eAEfd,EAAU,GACVE,EAAUQ,GACVN,EAAqB,GAAPM,KACb,CAACjB,IAEJgB,qBAAU,WACRM,MACC,CAACV,IACJI,qBAAU,WACRlB,EAAMyB,SAASC,OAAS1B,EAAM2B,UAAY,MACzC,CAAC3B,EAAMyB,SAAUzB,EAAM2B,YAC1BT,qBAAU,WACHF,GACHhB,EAAM4B,cACJ1B,EAAaF,EAAM6B,cAAgB7B,EAAM8B,kBAG5C,CAAC9B,EAAM6B,cAAe7B,EAAM8B,eAAgB5B,EAAYc,IAC3De,aACE,WACE/B,EAAMyB,SAASO,QACfhC,EAAMyB,SAASQ,YAAc,EAC7BhB,GAAeD,GACfhB,EAAM4B,cACJ1B,EAAaF,EAAM6B,cAAgB7B,EAAM8B,kBAG7Cd,EAAakB,IAAuB,MAEtC,IAAMV,EAAkB,WAEA,IAAlBV,GAAuBA,EAAgBd,EAAMsB,oBAAsB,GACrEX,EAAUX,EAAMuB,eAChBV,EAAoC,GAAtBb,EAAMuB,iBAEpBZ,EAAUX,EAAMqB,WAChBR,EAAgC,GAAlBb,EAAMqB,aAGxBU,aACE,WACMvB,GAAU,EACG,IAAXE,GACER,EACFa,GAAiB,SAACoB,GAAD,OAAUA,EAAO,MAElCxB,EAAUX,EAAMoB,cAChBP,EAAmC,GAArBb,EAAMoB,eAEtBH,GAAeD,GACfhB,EAAMyB,SAASC,OAAS1B,EAAM2B,UAAY,IAC1C3B,EAAMyB,SAASW,OACfjC,GAAeD,GACfO,EAAU,KAEVE,GAAU,SAACwB,GAAD,OAAUA,EAAO,KAC3B1B,EAAU,KAGZA,GAAU,SAAC0B,GAAD,OAAUA,EAAO,OAG/B7B,EAAS,IAAO,MAElB,IAUM+B,EAAUxD,IAChB,OACE,eAAC,IAAMyD,SAAP,WACE,cAACC,EAAA,EAAD,CACEC,WAAS,EACT3C,WAAW,SACX4C,QAAQ,SACRC,MAAO,CAAEC,aAAc,QAJzB,SAME,eAACC,EAAA,EAAD,CAAKtD,SAAS,WAAWM,QAAQ,cAAjC,UACE,cAACiD,EAAA,EAAD,CACEC,KAAK,SACLC,QAAQ,cACRC,MAAO,IACPC,UAAWZ,EAAQpD,iBAErB,cAAC4D,EAAA,EAAD,CACEC,KAAK,SACLC,QAAQ,cACRC,MAAO,KAAO,GAAc,GAATtC,EAAcF,GAAUI,GAC3CqC,UAAWZ,EAAQhD,cAErB,cAACuD,EAAA,EAAD,CAAKK,UAAWZ,EAAQ7C,UAAxB,SACE,eAAC0D,EAAA,EAAD,CAAYC,UAAU,MAAMjE,MAAM,gBAAlC,UACE,cAACgE,EAAA,EAAD,CAAYR,MAAO,CAAEU,SAAU,QAASlE,MAAO,WAA/C,SACGoB,EAAUJ,EAAa,qBAAQ,qBAAS,uBAE3C,cAACqC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASQ,UAAU,QAA3C,SACE,eAACC,EAAA,EAAD,CAAYR,MAAO,CAAEU,SAAU,QAASlE,MAAO,WAA/C,UACGwB,EADH,IAE+B,IAA5B2C,KAAKC,MAAM9C,EAAS,IAAY,IAAMA,EAASA,iBAO5D,eAAC+B,EAAA,EAAD,CAAMC,WAAS,EAAC3C,WAAW,SAAS4C,QAAQ,SAA5C,UACE,cAACc,EAAA,EAAD,CACEC,QAAS,WACPjD,GAAU,GACNH,GACFS,EAAuB,GAATH,EAAcF,IAGhCkC,MAAO,CACLxD,MAAO,UACPkE,SAAU,SACVxD,QAASU,EAAS,OAAS,MAG/B,cAACmD,EAAA,EAAD,CACED,QAAS,WACPjD,GAAU,GACVF,GAAe,IAEjBqC,MAAO,CACLxD,MAAO,UACPkE,SAAU,SACVxD,QAASU,EAAS,GAAK,UAG3B,cAACoD,EAAA,EAAD,CACEF,QAzEW,WACjBjD,GAAU,GACVF,GAAe,GACfM,EAAUX,EAAMoB,cAChBX,EAAU,GACVN,GAAc,GACdU,EAAmC,GAArBb,EAAMoB,cACpBL,EAAiB,IAmEX2B,MAAO,CACLxD,MAAO,UACPkE,SAAU,eAIhB,cAACb,EAAA,EAAD,CAAMC,WAAS,EAAC3C,WAAW,SAAS4C,QAAQ,SAA5C,SACE,eAACS,EAAA,EAAD,CAAYR,MAAO,CAAEU,SAAU,QAASlE,MAAO,WAA/C,8BACoB4B,W,SCvLb6C,EAxBoB,SAAC3D,GAClC,OACE,eAAC4D,EAAA,EAAD,CAAYT,UAAU,QAAtB,UACE,uBACEU,OAAO,UACPC,GAAG,iBACHC,KAAK,OACLrB,MAAO,CAAE9C,QAAS,QAClBoE,SAAU,SAACC,GACT,IAAMC,EACmB,OAAvBD,EAAME,OAAOC,MAAiBH,EAAME,OAAOC,MAAM,GAAK,KACpC,OAAhBF,KACuC,IAAvCA,EAAYH,KAAKM,QAAQ,SAI7BrE,EAAM4B,cAAcsC,GAHlBI,MAAM,8GAMZ,cAACC,EAAA,EAAD,Q,SCnBA1F,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXwF,KAAM,CACJ,QAAS,CACPpB,SAAU,OACVqB,UAAW,OACX9B,aAAc,cAiCP+B,EA5BqB,SAAC1E,GACnC,IAAMqC,EAAUxD,IAChB,OACE,cAAC8F,EAAA,EAAD,CACEb,GAAG,kBACHc,MAAO5E,EAAM4E,MACbb,KAAK,SACLc,gBAAiB,CACfC,QAAQ,GAEV/B,QAAQ,WACRC,MAAOhD,EAAMmB,KACb6C,SAAU,SAACC,GACT,IAAMc,EAAMd,EAAME,OAAOnB,MACrB+B,EACEC,OAAOD,IAAQ,EACjB/E,EAAMiF,QAAQ,GAEdjF,EAAMiF,QAAQD,OAAOD,IAGvB/E,EAAMiF,QAAQD,OAAOE,OAGzBjC,UAAWZ,EAAQmC,Q,2BCiBVW,EA/CuB,SAACnF,GASrC,OARAkB,qBAAU,YAEY,IAAjBlB,EAAM0B,SAAiB1B,EAAMoF,QACZ,IAAjBpF,EAAM0B,QAAgB1B,EAAMoF,SAE7BpF,EAAMqF,WAAWrF,EAAMoF,UACxB,CAACpF,EAAOA,EAAMoF,OAAQpF,EAAM0B,SAG7B,eAAC,IAAMY,SAAP,WACE,cAACY,EAAA,EAAD,CAAYY,GAAG,eAAewB,cAAY,EAA1C,oBAGA,eAAC/C,EAAA,EAAD,CAAMC,WAAS,EAAC+C,QAAS,EAAG1F,WAAW,SAAvC,UACE,cAAC2F,EAAA,EAAD,CACEhC,QAAS,SAACS,GACRjE,EAAMyF,iBAAiBzF,EAAM0B,QAC7B1B,EAAM0F,aAAa,GACnB1F,EAAMqF,WAAWrF,EAAMoF,SAEzB1C,MAAO,CAAE9C,QAASI,EAAMoF,OAAS,OAAS,IAN5C,SAQE,cAACO,EAAA,EAAD,MAEF,cAACH,EAAA,EAAD,CACEhC,QAAS,SAACS,GACRjE,EAAM0F,aAAa1F,EAAM4F,eACzB5F,EAAMqF,WAAWrF,EAAMoF,SAEzB1C,MAAO,CAAE9C,QAASI,EAAMoF,OAAS,GAAK,QALxC,SAOE,cAACS,EAAA,EAAD,MAEF,cAACtD,EAAA,EAAD,CAAMuD,MAAI,EAACC,IAAE,EAAb,SACE,cAACC,EAAA,EAAD,CACEhD,MAAOhD,EAAM0B,OACbsC,SAAU,SAACC,EAAOjB,GAChBhD,EAAM0F,aAAa1C,IAErBiD,kBAAgB,+BCnCtBpH,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXkH,WAAY,CACV9C,SAAU,UAEZ+C,QAAS,CACP7G,SAAU,WACVG,IAAK,EACLF,KAAM,EACN6G,MAAO,OACPC,OAAQ,OACRC,gBAAiB,OACjBC,QAAS,GACTC,OAAQ,QAuKCC,EAnKO,WAAM,MAEcxG,mBAAiB,IAF/B,mBAEnBmB,EAFmB,KAELsF,EAFK,OAGQzG,mBAAiB,GAHzB,mBAGnBoB,EAHmB,KAGRsF,EAHQ,OAIgB1G,mBAAiB,IAJjC,mBAInBsB,EAJmB,KAIJqF,EAJI,OAKwB3G,mBAAiB,GALzC,mBAKnBqB,EALmB,KAKAuF,EALA,OAOF5G,oBAAkB,GAPhB,mBAOnB6G,EAPmB,KAObC,EAPa,KASpBC,EAAkB,mBATE,EAUgB/G,mBACxC,IAAIgH,MAAMD,IAXc,mBAUnBnF,EAVmB,KAUJqF,EAVI,OAakBjH,mBAC1C,IAAIgH,MAAMD,IAdc,mBAanBlF,EAbmB,KAaHqF,EAbG,OAgBMlH,mBAAS,IAAIgH,MAAMD,IAhBzB,mBAgBnBvF,EAhBmB,KAgBT2F,EAhBS,OAiBQnH,mBAAiB,KAjBzB,mBAiBnB0B,EAjBmB,KAiBR+D,EAjBQ,OAkBgBzF,mBAAiB,KAlBjC,oBAkBnB2F,GAlBmB,MAkBJH,GAlBI,SAmBExF,oBAAS,GAnBX,qBAmBnBmF,GAnBmB,MAmBXC,GAnBW,MAqBpBhD,GAAUxD,IAChB,OACE,eAAC,IAAMyD,SAAP,WACE,eAAC+E,EAAA,EAAD,CAAWpE,UAAU,OAArB,UACE,cAAC,IAAD,CACEqE,QACE,cAAC1D,EAAA,EAAD,CACElB,MAAO,CACLxD,MAAO,UACPI,SAAU,WACVG,IAAK,EACLF,KAAM,OALV,SAQE,cAACgI,EAAA,EAAD,CAAUtE,UAAWZ,GAAQ6D,eAGjCsB,OAAK,EACLC,OAAQ,WACNV,GAAQ,IAEVW,QAAS,WACPX,GAAQ,GACJY,MAAMvG,IACRsF,EAAgB,GAEdiB,MAAMtG,IACRsF,EAAa,GAEXgB,MAAMpG,IACRqF,EAAiB,GAEfe,MAAMrG,IACRuF,EAAqB,IA7B3B,SAiCG,SAACe,GAAD,OACC,eAACrF,EAAA,EAAD,CACEG,MAAO,CACL4D,gBAAiB,UACjBuB,QAAS,OACTC,aAAc,QAJlB,UAOE,eAACvF,EAAA,EAAD,CAAMC,WAAS,EAAC3C,WAAW,SAAS4C,QAAQ,SAA5C,UACE,cAAC,EAAD,CACEtB,KAAMC,EACN6D,QAASyB,EACT9B,MAAM,kCAER,cAACmD,EAAD,CACEnG,cAAe,SAACsC,GACd,IAAM8D,EAAWC,OAAOC,IAAIC,gBAAgBjE,GAC5CgD,EAAiB,IAAID,MAAMe,UAIjC,eAACzF,EAAA,EAAD,CAAMC,WAAS,EAAC3C,WAAW,SAAS4C,QAAQ,SAA5C,UACE,cAAC,EAAD,CACEtB,KAAME,EACN4D,QAAS0B,EACT/B,MAAM,kCAGR,cAACmD,EAAD,CACEnG,cAAe,SAACsC,GACd,IAAM8D,EAAWC,OAAOC,IAAIC,gBAAgBjE,GAC5CiD,EAAkB,IAAIF,MAAMe,UAIlC,cAACzF,EAAA,EAAD,CAAMC,WAAS,EAAC3C,WAAW,SAAS4C,QAAQ,aAA5C,SACE,cAAC,EAAD,CACEtB,KAAMI,EACN0D,QAAS2B,EACThC,MAAM,sDAGV,cAACrC,EAAA,EAAD,CAAMC,WAAS,EAAC3C,WAAW,SAAS4C,QAAQ,aAA5C,SACE,cAAC,EAAD,CACEtB,KAAMG,EACN2D,QAAS4B,EACTjC,MAAM,iDAGV,cAAC,EAAD,CACElD,OAAQC,EACR+D,aAAcA,EACdE,cAAeA,GACfH,iBAAkBA,GAClBL,OAAQA,GACRC,UAAWA,KAEb,cAAC9C,EAAA,EAAD,CAAMC,WAAS,EAAC3C,WAAW,SAAS4C,QAAQ,SAA5C,SACE,cAAC+C,EAAA,EAAD,CACEzC,QAAQ,WACRS,QAAS,WACPuD,GAAQ,GACRa,IACID,MAAMvG,IACRsF,EAAgB,GAEdiB,MAAMtG,IACRsF,EAAa,GAEXgB,MAAMpG,IACRqF,EAAiB,GAEfe,MAAMrG,IACRuF,EAAqB,IAf3B,wBAyBR,cAAC,EAAD,CACEzF,aAAcA,EACdC,UAAWA,EACXE,cAAeA,EACfD,kBAAmBA,EACnBG,SAAUA,EACVI,cAAeA,EACfC,eAAgBA,EAChBH,UAAWA,EACXC,cAAe,SAACwG,GACdhB,EAAYgB,SAIlB,cAACxF,EAAA,EAAD,CACEK,UAAWZ,GAAQ8D,QACnBzD,MAAO,CAAE2F,WAAYvB,EAAO,UAAY,gBCjLjCwB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6e2e2f50.chunk.js","sourcesContent":["// TODO Separate files (per Components)\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Restore,\n  PauseCircleOutline,\n  PlayCircleOutline,\n} from \"@material-ui/icons\";\nimport {\n  Box,\n  CircularProgress,\n  createStyles,\n  Grid,\n  makeStyles,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport useInterval from \"use-interval\";\ntype Props = {\n  pomodoroTime: number;\n  breakTime: number;\n  longBreakTime: number;\n  longBreakInterval: number;\n  pomodoroMusic: HTMLAudioElement;\n  breakTimeMusic: HTMLAudioElement;\n  usrMusic: HTMLAudioElement;\n  usrVolume: number;\n  onMusicChange: (music: HTMLAudioElement) => void;\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    progressBottom: {\n      color: theme.palette.grey[200],\n    },\n    progressTop: {\n      color: \"#aaaaaa\",\n      position: \"absolute\",\n      left: 0,\n    },\n    in_circle: {\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n  })\n);\nconst Timer: React.FC<Props> = (props) => {\n  const musicLenLimit = 10;\n  const [isPomodoro, setIsPomodoro] = useState<boolean>(true);\n  const [isFirstPlay, setIsFirstPlay] = useState<boolean>(true);\n  const [isPlay, setIsPlay] = useState<boolean>(false);\n  const [second, setSecond] = useState<number>(10);\n  const [minute, setMinute] = useState<number>(0);\n  // const [second, setSecond] = useState<number>(0);\n  // const [minute, setMinute] = useState<number>(props.pomodoroTime);\n  const [initialSec, setInitialSec] = useState<number>(minute * 60 + second);\n  const [pomodoroCount, setPomodoroCount] = useState<number>(0);\n  const [musicStart, setMusicStart] = useState<boolean>(false);\n  useEffect(() => {\n    let time = isPomodoro ? props.pomodoroTime : props.breakTime;\n    if (!isPomodoro && pomodoroCount % props.longBreakInterval === 0) {\n      time = props.longBreakTime;\n    }\n    setSecond(0);\n    setMinute(time);\n    setInitialSec(time * 60);\n  }, [isPomodoro]);\n\n  useEffect(() => {\n    toggleBreakTime();\n  }, [pomodoroCount]);\n  useEffect(() => {\n    props.usrMusic.volume = props.usrVolume / 100;\n  }, [props.usrMusic, props.usrVolume]);\n  useEffect(() => {\n    if (!musicStart) {\n      props.onMusicChange(\n        isPomodoro ? props.pomodoroMusic : props.breakTimeMusic\n      );\n    }\n  }, [props.pomodoroMusic, props.breakTimeMusic, isPomodoro, musicStart]);\n  useInterval(\n    () => {\n      props.usrMusic.pause();\n      props.usrMusic.currentTime = 0;\n      setMusicStart(!musicStart);\n      props.onMusicChange(\n        isPomodoro ? props.pomodoroMusic : props.breakTimeMusic\n      );\n    },\n    musicStart ? musicLenLimit * 1000 : null\n  );\n  const toggleBreakTime = () => {\n    // console.log(pomodoroCount, props.longBreakInterval);\n    if (pomodoroCount !== 0 && pomodoroCount % props.longBreakInterval === 0) {\n      setMinute(props.longBreakTime);\n      setInitialSec(props.longBreakTime * 60);\n    } else {\n      setMinute(props.breakTime);\n      setInitialSec(props.breakTime * 60);\n    }\n  };\n  useInterval(\n    () => {\n      if (second <= 0) {\n        if (minute === 0) {\n          if (isPomodoro) {\n            setPomodoroCount((prev) => prev + 1);\n          } else {\n            setMinute(props.pomodoroTime);\n            setInitialSec(props.pomodoroTime * 60);\n          }\n          setMusicStart(!musicStart);\n          props.usrMusic.volume = props.usrVolume / 100;\n          props.usrMusic.play();\n          setIsPomodoro(!isPomodoro);\n          setSecond(0);\n        } else {\n          setMinute((prev) => prev - 1);\n          setSecond(59);\n        }\n      } else {\n        setSecond((prev) => prev - 1);\n      }\n    },\n    isPlay ? 1000 : null\n  );\n  const resetTimer = () => {\n    setIsPlay(false);\n    setIsFirstPlay(true);\n    setMinute(props.pomodoroTime);\n    setSecond(0);\n    setIsPomodoro(true);\n    setInitialSec(props.pomodoroTime * 60);\n    setPomodoroCount(0);\n  };\n\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Grid\n        container\n        alignItems=\"center\"\n        justify=\"center\"\n        style={{ marginBottom: \"20px\" }}\n      >\n        <Box position=\"relative\" display=\"inline-flex\">\n          <CircularProgress\n            size=\"50vmin\"\n            variant=\"determinate\"\n            value={100}\n            className={classes.progressBottom}\n          />\n          <CircularProgress\n            size=\"50vmin\"\n            variant=\"determinate\"\n            value={100 * (1 - (minute * 60 + second) / initialSec)}\n            className={classes.progressTop}\n          />\n          <Box className={classes.in_circle}>\n            <Typography component=\"div\" color=\"textSecondary\">\n              <Typography style={{ fontSize: \"5vmin\", color: \"#eeeeee\" }}>\n                {isPlay ? (isPomodoro ? \"作業中\" : \"休憩中\") : \"停止中\"}\n              </Typography>\n              <Grid container justify=\"center\" className=\"timer\">\n                <Typography style={{ fontSize: \"5vmin\", color: \"#eeeeee\" }}>\n                  {minute}:\n                  {Math.floor(second / 10) === 0 ? \"0\" + second : second}\n                </Typography>\n              </Grid>\n            </Typography>\n          </Box>\n        </Box>\n      </Grid>\n      <Grid container alignItems=\"center\" justify=\"center\">\n        <PlayCircleOutline\n          onClick={() => {\n            setIsPlay(true);\n            if (isFirstPlay) {\n              setInitialSec(minute * 60 + second);\n            }\n          }}\n          style={{\n            color: \"#eeeeee\",\n            fontSize: \"20vmin\",\n            display: isPlay ? \"none\" : \"\",\n          }}\n        />\n        <PauseCircleOutline\n          onClick={() => {\n            setIsPlay(false);\n            setIsFirstPlay(false);\n          }}\n          style={{\n            color: \"#eeeeee\",\n            fontSize: \"20vmin\",\n            display: isPlay ? \"\" : \"none\",\n          }}\n        />\n        <Restore\n          onClick={resetTimer}\n          style={{\n            color: \"#eeeeee\",\n            fontSize: \"20vmin\",\n          }}\n        />\n      </Grid>\n      <Grid container alignItems=\"center\" justify=\"center\">\n        <Typography style={{ fontSize: \"3vmin\", color: \"#eeeeee\" }}>\n          Pomomodo Count : {pomodoroCount}\n        </Typography>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default Timer;\n","import { IconButton } from \"@material-ui/core\";\nimport { LibraryMusic } from \"@material-ui/icons\";\n\nimport React from \"react\";\ntype Props = {\n  onMusicChange: (selectMusic: File) => void;\n};\nconst BreakTime: React.FC<Props> = (props) => {\n  return (\n    <IconButton component=\"label\">\n      <input\n        accept=\"audio/*\"\n        id=\"pomodoro-music\"\n        type=\"file\"\n        style={{ display: \"none\" }}\n        onChange={(event) => {\n          const selectMusic =\n            event.target.files !== null ? event.target.files[0] : null;\n          if (selectMusic === null) return;\n          if (selectMusic.type.indexOf(\"audio\") === -1) {\n            alert(\"オーディオファイルを選んでください\");\n            return;\n          }\n          props.onMusicChange(selectMusic);\n        }}\n      />\n      <LibraryMusic></LibraryMusic>\n    </IconButton>\n  );\n};\n\nexport default BreakTime;\n","import { createStyles, makeStyles, TextField, Theme } from \"@material-ui/core\";\nimport React from \"react\";\ntype Props = {\n  time: number;\n  setTime: (num: number) => void;\n  label: string;\n};\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      \"& > *\": {\n        fontSize: \"20px\",\n        marginTop: \"10px\",\n        marginBottom: \"10px\",\n      },\n    },\n  })\n);\nconst TimeSetter: React.FC<Props> = (props) => {\n  const classes = useStyles();\n  return (\n    <TextField\n      id=\"outlined-number\"\n      label={props.label}\n      type=\"number\"\n      InputLabelProps={{\n        shrink: true,\n      }}\n      variant=\"outlined\"\n      value={props.time}\n      onChange={(event) => {\n        const val = event.target.value;\n        if (val) {\n          if (Number(val) <= 1) {\n            props.setTime(1);\n          } else {\n            props.setTime(Number(val));\n          }\n        } else {\n          props.setTime(Number(NaN));\n        }\n      }}\n      className={classes.root}\n    />\n  );\n};\nexport default TimeSetter;\n","import React, { useEffect } from \"react\";\nimport { Button, Grid, Slider, Typography } from \"@material-ui/core\";\nimport { VolumeOff, VolumeUp } from \"@material-ui/icons\";\ntype Props = {\n  volume: number;\n  setUsrVolume: (volume: number) => void;\n  volBeforeMute: number;\n  setVolBeforeMute: (volume: number) => void;\n  isMute: boolean;\n  setIsMute: (isMute: boolean) => void;\n};\n\nconst VolumeSlider: React.FC<Props> = (props) => {\n  useEffect(() => {\n    if (\n      (props.volume === 0 && !props.isMute) ||\n      (props.volume !== 0 && props.isMute)\n    )\n      props.setIsMute(!props.isMute);\n  }, [props, props.isMute, props.volume]);\n\n  return (\n    <React.Fragment>\n      <Typography id=\"input-slider\" gutterBottom>\n        Volume\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Button\n          onClick={(event) => {\n            props.setVolBeforeMute(props.volume);\n            props.setUsrVolume(0);\n            props.setIsMute(!props.isMute);\n          }}\n          style={{ display: props.isMute ? \"none\" : \"\" }}\n        >\n          <VolumeUp />\n        </Button>\n        <Button\n          onClick={(event) => {\n            props.setUsrVolume(props.volBeforeMute);\n            props.setIsMute(!props.isMute);\n          }}\n          style={{ display: props.isMute ? \"\" : \"none\" }}\n        >\n          <VolumeOff />\n        </Button>\n        <Grid item xs>\n          <Slider\n            value={props.volume}\n            onChange={(event, value) => {\n              props.setUsrVolume(value as number);\n            }}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\nexport default VolumeSlider;\n","import React, { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Container,\n  createStyles,\n  Grid,\n  IconButton,\n  makeStyles,\n  Theme,\n} from \"@material-ui/core\";\nimport { Settings } from \"@material-ui/icons\";\nimport Popup from \"reactjs-popup\";\nimport Timer from \"./Timer\";\nimport UploadButton from \"./UploadButton\";\nimport TimeSetter from \"./TimeSetter\";\nimport VolumeSlider from \"./VolumeSlider\";\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    settingBtn: {\n      fontSize: \"10vmin\",\n    },\n    fadeBox: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      backgroundColor: \"#000\",\n      opacity: 0.5,\n      zIndex: 1,\n    },\n  })\n);\nconst App: React.FC = () => {\n  // 時間設定\n  const [pomodoroTime, setPomodoroTime] = useState<number>(25);\n  const [breakTime, setBreakTime] = useState<number>(5);\n  const [longBreakTime, setLongBreakTime] = useState<number>(25);\n  const [longBreakInterval, setLongBreakInterval] = useState<number>(4);\n  // 設定画面で画面を暗くする\n  const [fade, setFade] = useState<boolean>(false);\n  // 音楽ファイルの設定\n  const defaultMusicURL = \"./alarmBreak.mp3\";\n  const [pomodoroMusic, setPomodoroMusic] = useState(\n    new Audio(defaultMusicURL)\n  );\n  const [breakTimeMusic, setBreakTimeMusic] = useState(\n    new Audio(defaultMusicURL)\n  );\n  const [usrMusic, setUsrMusic] = useState(new Audio(defaultMusicURL));\n  const [usrVolume, setUsrVolume] = useState<number>(100);\n  const [volBeforeMute, setVolBeforeMute] = useState<number>(100);\n  const [isMute, setIsMute] = useState(false);\n\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <Container className=\"root\">\n        <Popup\n          trigger={\n            <IconButton\n              style={{\n                color: \"#eeeeee\",\n                position: \"relative\",\n                top: 0,\n                left: \"80%\",\n              }}\n            >\n              <Settings className={classes.settingBtn} />\n            </IconButton>\n          }\n          modal\n          onOpen={() => {\n            setFade(true);\n          }}\n          onClose={() => {\n            setFade(false);\n            if (isNaN(pomodoroTime)) {\n              setPomodoroTime(1);\n            }\n            if (isNaN(breakTime)) {\n              setBreakTime(1);\n            }\n            if (isNaN(longBreakTime)) {\n              setLongBreakTime(1);\n            }\n            if (isNaN(longBreakInterval)) {\n              setLongBreakInterval(1);\n            }\n          }}\n        >\n          {(close: () => void) => (\n            <Grid\n              style={{\n                backgroundColor: \"#eeeeee\",\n                padding: \"20px\",\n                borderRadius: \"10px\",\n              }}\n            >\n              <Grid container alignItems=\"center\" justify=\"center\">\n                <TimeSetter\n                  time={pomodoroTime}\n                  setTime={setPomodoroTime}\n                  label=\"作業時間(min)\"\n                />\n                <UploadButton\n                  onMusicChange={(selectMusic) => {\n                    const musicUrl = window.URL.createObjectURL(selectMusic);\n                    setPomodoroMusic(new Audio(musicUrl));\n                  }}\n                />\n              </Grid>\n              <Grid container alignItems=\"center\" justify=\"center\">\n                <TimeSetter\n                  time={breakTime}\n                  setTime={setBreakTime}\n                  label=\"休憩時間(min)\"\n                />\n\n                <UploadButton\n                  onMusicChange={(selectMusic) => {\n                    const musicUrl = window.URL.createObjectURL(selectMusic);\n                    setBreakTimeMusic(new Audio(musicUrl));\n                  }}\n                />\n              </Grid>\n              <Grid container alignItems=\"center\" justify=\"flex-start\">\n                <TimeSetter\n                  time={longBreakTime}\n                  setTime={setLongBreakTime}\n                  label=\"長めの休憩時間(min)\"\n                />\n              </Grid>\n              <Grid container alignItems=\"center\" justify=\"flex-start\">\n                <TimeSetter\n                  time={longBreakInterval}\n                  setTime={setLongBreakInterval}\n                  label=\"長めの休憩頻度\"\n                />\n              </Grid>\n              <VolumeSlider\n                volume={usrVolume}\n                setUsrVolume={setUsrVolume}\n                volBeforeMute={volBeforeMute}\n                setVolBeforeMute={setVolBeforeMute}\n                isMute={isMute}\n                setIsMute={setIsMute}\n              />\n              <Grid container alignItems=\"center\" justify=\"center\">\n                <Button\n                  variant=\"outlined\"\n                  onClick={() => {\n                    setFade(false);\n                    close();\n                    if (isNaN(pomodoroTime)) {\n                      setPomodoroTime(1);\n                    }\n                    if (isNaN(breakTime)) {\n                      setBreakTime(1);\n                    }\n                    if (isNaN(longBreakTime)) {\n                      setLongBreakTime(1);\n                    }\n                    if (isNaN(longBreakInterval)) {\n                      setLongBreakInterval(1);\n                    }\n                  }}\n                >\n                  OK\n                </Button>\n              </Grid>\n            </Grid>\n          )}\n        </Popup>\n        <Timer\n          pomodoroTime={pomodoroTime}\n          breakTime={breakTime}\n          longBreakTime={longBreakTime}\n          longBreakInterval={longBreakInterval}\n          usrMusic={usrMusic}\n          pomodoroMusic={pomodoroMusic}\n          breakTimeMusic={breakTimeMusic}\n          usrVolume={usrVolume}\n          onMusicChange={(music) => {\n            setUsrMusic(music);\n          }}\n        />\n      </Container>\n      <Box\n        className={classes.fadeBox}\n        style={{ visibility: fade ? \"visible\" : \"hidden\" }}\n      ></Box>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}